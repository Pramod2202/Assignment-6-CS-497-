def longestCycleLength(edges):
    def dfs(node, visited, cycle_length):
        if visited[node] == 1:
            return cycle_length - visited[node]
        if visited[node] == 2:
            return 0

        visited[node] = cycle_length

        next_node = edges[node]
        if next_node == -1:
            visited[node] = 2
            return 0

        return dfs(next_node, visited, cycle_length + 1)

    n = len(edges)
    visited = [0] * n
    max_cycle_length = -1

    for i in range(n):
        if visited[i] == 0:
            cycle_length = dfs(i, visited, 1)
            max_cycle_length = max(max_cycle_length, cycle_length)

    return max_cycle_length if max_cycle_length > 2 else -1

# Example usage:
edges1 = [3, 3, 4, 2, 3]
print(longestCycleLength(edges1))  

edges2 = [2, -1, 3, 1]
print(longestCycleLength(edges2))
