def minimumCost(N, connections):
    def find(parent, node):
        if parent[node] == node:
            return node
        parent[node] = find(parent, parent[node])
        return parent[node]

    def union(parent, rank, x, y):
        root_x = find(parent, x)
        root_y = find(parent, y)

        if root_x != root_y:
            if rank[root_x] < rank[root_y]:
                parent[root_x] = root_y
            elif rank[root_x] > rank[root_y]:
                parent[root_y] = root_x
            else:
                parent[root_x] = root_y
                rank[root_y] += 1

    connections.sort(key=lambda x: x[2])

    parent = [i for i in range(N + 1)]
    rank = [0] * (N + 1)

    total_cost = 0
    edges_added = 0

    for connection in connections:
        city1, city2, cost = connection
        if find(parent, city1) != find(parent, city2):
            union(parent, rank, city1, city2)
            total_cost += cost
            edges_added += 1

    if edges_added == N - 1:
        return total_cost
    else:
        return -1

# Example usage:
N1, connections1 = 3, [[1, 2, 5], [1, 3, 6], [2, 3, 1]]
print(minimumCost(N1, connections1))  

N2, connections2 = 4, [[1, 2, 3], [3, 4, 4]]
print(minimumCost(N2, connections2))  
